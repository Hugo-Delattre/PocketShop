services:
  db:
    image: postgres:16
    restart: always
    container_name: postgres
    environment:
      - POSTGRES_USER=${PG_USER}
      - POSTGRES_PASSWORD=${PG_PASSWORD}
      - POSTGRES_DB=${PG_DB}
      - PGLOG_DIRECTORY=/var/log/postgresql
      - POSTGRES_LOGGING_LEVEL=debug
    volumes:
    - postgres_data:/var/lib/postgresql/data
    - ${PWD}/logs/postgres:/var/log/postgresql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PG_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5

  app:
    build:
      context: ./backend
      dockerfile: ${DOCKERFILE}
    container_name: nest
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=${NODE_ENV}
      - JWT_SECRET=${JWT_SECRET}
    volumes:
      - ${PWD}/backend:/app
      - /app/node_modules
      - ${PWD}/backend/logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
    restart: always

  mobile:
    build:
      context: ./mobile
      dockerfile: ${DOCKERFILE}
    container_name: mobile
    ports:
      - "19000:19000" # Pour le packager Expo
      - "19001:19001" # Pour le packager Metro
      - "19002:19002" # Pour l'interface web Expo
    environment:
      - REACT_NATIVE_PACKAGER_HOSTNAME=0.0.0.0
    volumes:
      - ${PWD}/mobile/trinity:/app
      - /app/node_modules
    command: npx expo start --tunnel
    networks:
      - default

  backoffice:
    build:
      context: ./frontend/backoffice
      dockerfile: ${DOCKERFILE}
    container_name: backoffice
    ports:
      - "3003:3000"
    volumes:
      - ${PWD}/frontend/backoffice:/app
      - /app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true
      - FAST_REFRESH=true
    depends_on:
      db:
        condition: service_healthy
    restart: always

  frontoffice:
    build:
      context: ./frontend/frontoffice
      dockerfile: ${DOCKERFILE}
    container_name: frontoffice
    ports:
      - "3002:3000"
    volumes:
      - ${PWD}/frontend/frontoffice:/app
      - /app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true
      - FAST_REFRESH=true
    depends_on:
      db:
        condition: service_healthy
    restart: always

  prometheus:
    container_name: prometheus
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./backend/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - monitoring
    privileged: true

  cadvisor:
    container_name: cadvisor
    image: gcr.io/cadvisor/cadvisor:latest
    ports:
      - "8085:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - monitoring
    privileged: true

  grafana:
    container_name: grafana
    image: grafana/grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - monitoring

  sonarqube:
    container_name: sonarqube
    image: sonarqube:latest
    environment:
      - SONARQUBE_JDBC_URL=jdbc:postrgesql://db:5432/${PG_DB}
      - SONARQUBE_JDBC_USERNAME=${PG_USER}
      - SONARQUBE_JDBC_PASSWORD=${PG_PASSWORD}
    ports:
      - "9000:9000"
    depends_on:
      - db
    networks:
      - monitoring
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:8.16.1
    environment:
      - discorvery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
      - "9800:9800"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - elastic-net

  kibana:
    image: docker.elastic.co/kibana/kibana:8.16.1
    container_name: kibana
    environment:
      - ELASTICSAERCH_HOST=http://elasticsearch:9200
    ports:
      - "5601:5601"


networks:
  monitoring:
  elastic-net:
  default:
    driver: bridge

volumes:
  postgres_data:
  grafana_data:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
  elasticsearch_data:
